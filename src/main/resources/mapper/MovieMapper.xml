<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.example.boot_mybatis.dao.MovieMapper">




	<resultMap type="com.example.boot_mybatis.model.Movie"
		id="movielist">
		<id property="id" column="movie_id"></id>
		<result property="title" column="movie_title" />
		<result property="description" column="movie_description" />
		<result property="releasedate" column="movie_releasedate" />
		<collection property="movieGenre" ofType="com.example.boot_mybatis.model.Genre"
			>
			<id property="id" column="genre_id"></id>
			<result property="genre" column="genre" />
		</collection>


	</resultMap>


	<select id="getListMovie" parameterType="Map"
		resultMap="movielist" resultSetType="SCROLL_SENSITIVE">
		
		SELECT 
		    m.movie_id,
		    m.movie_title,
		    m.movie_description,
		    m.movie_releasedate, 
		    group_concat(g.genre separator ", ") as genre
		    
		    from movie m
		    inner join movie_genre mg
		    on m.movie_id = mg.movie_id
		    inner join genre g
		    on mg.genre_id = g.genre_id
		   <where>
		<if test="genre != null and genre !=''">
			
			<foreach collection="genre" item="genre1" separator="OR" open="AND">
				g.genre_id = #{genre1}
			</foreach>
		</if>
		AND m.movie_releasedate between #{fromdate} and #{todate}
		<if test="search !=null and search !=''">
		AND (m.movie_title LIKE #{search} or m.movie_description LIKE #{search})
		</if>
		</where>
		
		
		 group by m.movie_id
		ORDER BY movie_releasedate ${sortby} , m.movie_id
		

	</select>

	<insert id="addMovie" keyProperty="id" useGeneratedKeys="true">
		INSERT
		INTO movie(movie_title, movie_description,
		movie_releasedate)
		VALUES(#{movie.title}, #{movie.description}, #{movie.releasedate});
	</insert>

	<insert id="addMovieGenre">
	
			INSERT INTO movie_genre(movie_id, genre_id)
			VALUES(#{movie_id}, #{genre_id})
		

	</insert>
	
	<select id="getMoviebyId" parameterType="Int"
		resultMap="movielist">
		
		SELECT * FROM (
		SELECT * FROM movie where movie_id = ${id}) as m1

		Inner join movie_genre
		On m1.movie_id = movie_genre.movie_id
		Inner join genre
		on movie_genre.genre_id = genre.genre_id
		
	</select>
	
	<delete id="deleteMovieGenre" parameterType="int">

		
		DELETE FROM movie_genre WHERE movie_id = #{id}
		
	</delete>
	
	<update id="updateMovie">
		UPDATE movie SET
		movie_title = #{movie.title}, movie_description = #{movie.description},
		movie_releasedate = #{movie.releasedate}
		WHERE movie_id = #{movie.id}
	</update>
	
	<delete id="deleteMovie" parameterType="int">

		
		DELETE FROM movie WHERE movie_id = #{id}
		
	</delete>
	
	<select id="getMovieRowCount" parameterType="Map"
		resultType="int">
		
		SELECT COUNT(*) 

		FROM(
		
		SELECT 
		    m.movie_id,
		    m.movie_title,
		    m.movie_description,
		    m.movie_releasedate, 
		    group_concat(g.genre separator ", ") as genre
		    
		    from movie m
		    inner join movie_genre mg
		    on m.movie_id = mg.movie_id
		    inner join genre g
		    on mg.genre_id = g.genre_id
		   
		   <where>
		   
		<if test="genre != null and genre !=''">
			
			<foreach collection="genre" item="genre1" separator="OR" open="AND">
				g.genre_id = #{genre1}
			</foreach>
		</if>
		AND movie_releasedate between #{fromdate} and #{todate}
		<if test="search !=null and search !=''">
		AND (movie_title LIKE #{search} or movie_description LIKE #{search})
		</if>
		</where>
		
		 group by m.movie_id
		 ) as movierowcount
		

	</select>
	
	





</mapper>